// Generated by Haxe 4.3.6
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var CURL = function() { };
CURL.__name__ = true;
CURL.spawnCURL = function(args) {
	if(CURL.spawnCURL_first) {
		CURL.spawnCURL_first = false;
	} else if(Config.delay > 0) {
		Sys.sleep(Config.delay / 1000);
	}
	if(Config.userAgent != null) {
		args = args.concat(["--user-agent",Config.userAgent]);
	}
	return js_node_ChildProcess.spawnSync("curl",args);
};
CURL.getText = function(url,type) {
	var tmp = "tmp/out.html";
	if(Config.verbose) {
		console.info("Fetching \"" + url + "\"...");
	}
	var cachePath = Config.cache ? haxe_io_Path.join([Config.cacheDir,Tools.sanitizeName(url) + "." + type]) : null;
	if(cachePath != null) {
		if(sys_FileSystem.exists(cachePath)) {
			if(Config.verbose) {
				console.info("Cached!");
			}
			return js_node_Fs.readFileSync(cachePath,{ encoding : "utf8"});
		}
	}
	var tmp1 = cachePath;
	var outPath = tmp1 != null ? tmp1 : tmp;
	var curl = CURL.spawnCURL(["--location",url,"--output",outPath]);
	if(curl.error != null) {
		if(Config.verbose) {
			console.info("Error! " + Std.string(curl.error));
		}
		return null;
	}
	if(!sys_FileSystem.exists(outPath)) {
		if(Config.verbose) {
			console.info("No file!");
		}
		return null;
	}
	var size = FileTools.getSize(outPath);
	var text = "OK! (" + FileTools.printSize(size) + ")";
	if(Config.verbose) {
		console.info(text);
	}
	return js_node_Fs.readFileSync(outPath,{ encoding : "utf8"});
};
CURL.download = function(url,out) {
	if(Config.verbose) {
		console.info("Downloading \"" + url + "\"");
	}
	var cachePath = Config.cache ? haxe_io_Path.join([Config.cacheDir,Tools.sanitizeName(url)]) : null;
	if(cachePath != null) {
		if(sys_FileSystem.exists(cachePath)) {
			if(Config.verbose) {
				console.info("Cached!");
			}
			sys_io_File.copy(cachePath,out);
			return true;
		}
	}
	if(Config.verbose) {
		console.info("-> \"" + out + "\"... ");
	}
	var curl = CURL.spawnCURL(["--location",url,"--output",out]);
	if(curl.error != null) {
		if(Config.verbose) {
			console.info("Error! " + Std.string(curl.error));
		}
		return false;
	}
	if(!sys_FileSystem.exists(out)) {
		if(Config.verbose) {
			console.info("No file!");
		}
		return false;
	}
	if(cachePath != null) {
		sys_io_File.copy(out,cachePath);
	}
	var size = FileTools.getSize(out);
	var text = "OK! (" + FileTools.printSize(size) + ")";
	if(Config.verbose) {
		console.info(text);
	}
	return true;
};
CURL.downloadImage = function(url,out) {
	return CURL.download(url,out);
};
var Config = function() { };
Config.__name__ = true;
Config.ready = function() {
	var programDir = haxe_io_Path.directory(__filename);
	Config.tempDir = haxe_io_Path.join([programDir,"tmp"]);
	if(!sys_FileSystem.exists(Config.tempDir)) {
		sys_FileSystem.createDirectory(Config.tempDir);
	}
	Config.cacheDir = haxe_io_Path.join([programDir,"cache"]);
	if(Config.cache && !sys_FileSystem.exists(Config.cacheDir)) {
		sys_FileSystem.createDirectory(Config.cacheDir);
	}
};
var Console = {};
Console.verbose = function(text) {
	if(Config.verbose) {
		console.info(text);
	}
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b;
		}
	}
};
var FetchCtx = function(url) {
	this.videoLines = [];
	this.imageLines = [];
	this.noPage = false;
	this.badURL = false;
	this.lines = [];
	this.isPixels = false;
	this.url = url;
};
FetchCtx.__name__ = true;
FetchCtx.prototype = {
	get_ready: function() {
		return this.lines.length != 0;
	}
	,getError: function() {
		if(this.badURL) {
			return "\"" + this.url + "\" doesn't seem to be a valid URL.";
		} else if(this.noPage) {
			return "Failed to fetch \"" + this.url + "\".";
		} else {
			return "Failed to find media in \"" + this.url + "\".";
		}
	}
	,addImage: function(imageRel,imageFull,thumbRel,alt) {
		var maxSize = Config.maxSize;
		var maxWidth = Config.maxWidth;
		var maxHeight = Config.maxHeight;
		if(maxSize > 0 || maxWidth > 0 || maxHeight > 0) {
			do {
				var wantResize = false;
				if(Config.maxSize > 0) {
					var size = FileTools.getSize(imageFull);
					haxe_Log.trace(imageFull,{ fileName : "src/FetchCtx.hx", lineNumber : 51, className : "FetchCtx", methodName : "addImage", customParams : [size / 1024,maxSize / 1024]});
					wantResize = size > maxSize;
				}
				if(!wantResize && (Config.maxWidth > 0 || Config.maxHeight > 0)) {
					var dims = Magick.getDims(imageFull);
					if(dims != null) {
						if(maxWidth > 0 && dims.width > maxWidth) {
							wantResize = true;
						} else if(maxHeight > 0 && dims.height > maxHeight) {
							wantResize = true;
						}
					}
				}
				if(!wantResize) {
					break;
				}
				var currExt = haxe_io_Path.extension(imageFull).toLowerCase();
				var newExt = Config.useWEBP ? "webp" : "jpg";
				var sameExt = currExt == newExt;
				var useTemp = sameExt && maxSize > 0;
				var tempFull = useTemp ? Config.tempDir + ("/temp." + newExt) : haxe_io_Path.withExtension(imageFull,newExt);
				var args = [imageFull,"-quality",Std.string(Config.quality)];
				var note = "Converting \"" + imageRel + "\" to " + newExt.toUpperCase();
				if(maxWidth > 0 || maxHeight > 0) {
					var size1 = "x";
					if(maxWidth > 0) {
						size1 = maxWidth + size1;
					}
					if(maxHeight > 0) {
						size1 += maxHeight;
					}
					note += ", " + size1;
					args = args.concat(["-resize",size1 + ">"]);
				}
				if(Config.verbose) {
					console.info(note);
				}
				Magick.run(args.concat([tempFull]));
				if(maxSize > 0) {
					var scaleStep = 0.75;
					var scale = 100.0;
					var _g = 0;
					while(_g < 7) {
						var attempt = _g++;
						scale *= scaleStep;
						var size2 = FileTools.getSize(tempFull);
						if(size2 <= maxSize) {
							break;
						}
						var sizeStr = Math.round(scale * 100) / 100 + "%";
						var text = "Too big (" + FileTools.printSize(size2) + "), trying " + sizeStr + " scale";
						if(Config.verbose) {
							console.info(text);
						}
						Magick.run([imageFull,"-resize",sizeStr,"-quality",Std.string(Config.quality),tempFull]);
					}
				}
				if(!sameExt) {
					js_node_Fs.unlinkSync(imageFull);
					imageRel = haxe_io_Path.withExtension(imageRel,newExt);
					imageFull = haxe_io_Path.withExtension(imageFull,newExt);
				}
				if(useTemp) {
					sys_io_File.copy(tempFull,imageFull);
				}
			} while(false);
		}
		var text = Config.markdown ? "[![" + alt + "](" + thumbRel + ")](" + imageRel + ")" : imageRel;
		this.lines.push(text);
		this.imageLines.push(text);
	}
	,addVideo: function(videoRel,thumbRel,alt) {
		var text;
		if(Config.markdown) {
			if(thumbRel != null) {
				text = "[![" + alt + "](" + thumbRel + ")](" + videoRel + ")";
			} else {
				text = "[video](" + videoRel + ")";
			}
		} else {
			text = videoRel;
		}
		this.lines.push(text);
		this.videoLines.push(text);
	}
};
var FileTools = function() { };
FileTools.__name__ = true;
FileTools.printSize = function(i) {
	if(i < 0) {
		return "???";
	}
	var n = i;
	if(n < 10000) {
		return Std.string(Math.round(n * 100) / 100) + " " + "B";
	}
	n /= 1024;
	if(n < 10000) {
		return Std.string(Math.round(n * 100) / 100) + " " + "KB";
	}
	n /= 1024;
	return Std.string(Math.round(n * 100) / 100) + " " + "MB";
};
FileTools.printSpawnBuffer = function(buf) {
	if(buf == null || typeof(buf) == "string") {
		return buf;
	} else {
		return buf.toString();
	}
};
FileTools.getSize = function(path) {
	try {
		return js_node_Fs.statSync(path).size;
	} catch( _g ) {
		var x = haxe_Exception.caught(_g).unwrap();
		if(Config.verbose) {
			console.info("Error getting size for \"" + path + "\":" + Std.string(x));
		}
		return -1;
	}
};
FileTools.getAltPath = function(path) {
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var Magick = function() { };
Magick.__name__ = true;
Magick.run = function(args) {
	var proc = js_node_ChildProcess.spawnSync("magick",args);
	if(proc.error != null) {
		if(Config.verbose) {
			console.info("Failed to run Magick: " + Std.string(proc.error));
		}
	}
	return proc;
};
Magick.createThumb = function(imageRel,imageFull) {
	var thumbSize = Config.thumbSize;
	if(thumbSize == null) {
		return null;
	}
	if(Config.verbose) {
		console.info("Generating a thumbnail for \"" + imageRel + "\"");
	}
	var ext = Config.useWEBP ? "webp" : "jpg";
	var suffix = Config.sep + ("th." + ext);
	var thumbFull = haxe_io_Path.withoutExtension(imageFull) + suffix;
	var thumbRel = haxe_io_Path.withoutExtension(imageRel) + suffix;
	var proc = Magick.run([imageFull,"-resize",thumbSize + ">","-quality",Std.string(Config.quality),thumbFull]);
	if(proc.error != null) {
		return null;
	}
	return thumbRel;
};
Magick.getDims = function(imageFull) {
	var proc = Magick.run([imageFull,"-format","dims:%w:%h","info:"]);
	if(proc.error != null) {
		return null;
	}
	var text = FileTools.printSpawnBuffer(proc.stdout);
	if(Magick.getDims_rxDims.match(text)) {
		return { width : Std.parseInt(Magick.getDims_rxDims.matched(1)), height : Std.parseInt(Magick.getDims_rxDims.matched(2))};
	} else {
		if(Config.verbose) {
			console.info("Couldn't match magick output: \"" + text + "\"");
		}
		return null;
	}
};
var Main = function() { };
Main.__name__ = true;
Main.procURL = function(url) {
	var ctx = new FetchCtx(url);
	if(!Main.rxURL.match(url)) {
		ctx.badURL = true;
		return ctx;
	}
	ctx.hostname = Tools.removeFromStart(Main.rxURL.matched(1),"www.");
	ctx.pathname = Main.rxURL.matched(2);
	switch(ctx.hostname) {
	case "bskx.app":case "bsky.app":case "bskyx.app":case "fxbsky.app":
		places_BSky.get(ctx);
		break;
	case "fixupx.com":case "fxtwitter.com":case "vxtwitter.com":case "x.com":
		places_Twitter.get(ctx);
		break;
	default:
		places_Generic.get(ctx);
	}
	return ctx;
};
Main.main = function() {
	var args = process.argv.slice(2);
	if(args.indexOf("--run-tests") != -1) {
		Test.run();
		return;
	}
	if(args.indexOf("--help") != -1 || args.indexOf("/?") != -1) {
		process.stdout.write("YAL's social media downloader");
		process.stdout.write("\n");
		process.stdout.write("CLI docs coming soon!");
		process.stdout.write("\n");
		return;
	}
	var argi = 0;
	var inPath = null;
	var outPath = null;
	while(argi < args.length) {
		var del;
		switch(args[argi]) {
		case "--cache":
			Config.cache = true;
			del = 1;
			break;
		case "--delay":
			var def = 0;
			if(def == null) {
				def = 0;
			}
			var tmp = Std.parseInt(args[argi + 1]);
			Config.delay = tmp != null ? tmp : def;
			del = 2;
			break;
		case "--dir":
			Config.outDir = args[argi + 1];
			del = 2;
			break;
		case "--in":
			inPath = args[argi + 1];
			del = 2;
			break;
		case "--lossless":case "--png":
			Config.lossless = true;
			del = 1;
			break;
		case "--markdown":case "--md":
			Config.markdown = true;
			del = 1;
			break;
		case "--max-dimensions":case "--max-dims":
			var rxDims = new EReg("^(\\d+)x(\\d+)$","");
			if(rxDims.match(args[argi + 1])) {
				var tmp1 = Std.parseInt(rxDims.matched(1));
				Config.maxWidth = tmp1 != null ? tmp1 : 0;
				var tmp2 = Std.parseInt(rxDims.matched(2));
				Config.maxHeight = tmp2 != null ? tmp2 : 0;
			} else {
				process.stdout.write("Expected WxH for --max-dims!");
				process.stdout.write("\n");
			}
			del = 2;
			break;
		case "--max-height":
			var def1 = 0;
			if(def1 == null) {
				def1 = 0;
			}
			var tmp3 = Std.parseInt(args[argi + 1]);
			Config.maxWidth = tmp3 != null ? tmp3 : def1;
			del = 2;
			break;
		case "--max-size":
			var snip = args[argi + 1].toLowerCase();
			var rxSize = new EReg("^([\\d,.]+)\\s*([km]?b?)?$","");
			if(rxSize.match(snip)) {
				var numStr = StringTools.replace(rxSize.matched(1),",",".");
				var num = parseFloat(numStr);
				if(!isNaN(num)) {
					var unit = rxSize.matched(2);
					var mult = 1024;
					if(unit == "mb" || unit == "m") {
						mult = 1048576;
					} else if(unit == "b") {
						mult = 1;
					}
					Config.maxSize = Math.round(mult * num);
				} else {
					process.stdout.write(Std.string("\"" + numStr + "\" is not a valid number for --max-size!"));
					process.stdout.write("\n");
				}
			} else {
				process.stdout.write("Expected #KB/#MB for --max-size!");
				process.stdout.write("\n");
			}
			del = 2;
			break;
		case "--max-width":
			var def2 = 0;
			if(def2 == null) {
				def2 = 0;
			}
			var tmp4 = Std.parseInt(args[argi + 1]);
			Config.maxWidth = tmp4 != null ? tmp4 : def2;
			del = 2;
			break;
		case "--out":
			outPath = args[argi + 1];
			del = 2;
			break;
		case "--plain":
			Config.markdown = false;
			del = 1;
			break;
		case "--prefix":
			Config.prefix = args[argi + 1];
			del = 2;
			break;
		case "--thumb":
			Config.thumbSize = args[argi + 1];
			del = 2;
			break;
		case "--verbose":
			Config.verbose = true;
			del = 1;
			break;
		case "--webp":
			Config.useWEBP = true;
			del = 1;
			break;
		default:
			del = 0;
		}
		if(del > 0) {
			args.splice(argi,del);
		} else {
			++argi;
		}
	}
	Config.ready();
	var markdown = Config.markdown;
	var outLines = [];
	if(inPath != null) {
		var text = js_node_Fs.readFileSync(inPath,{ encoding : "utf8"});
		text = StringTools.replace(text,"\r","");
		var lines = text.split("\n");
		var header = null;
		var _g = 0;
		while(_g < lines.length) {
			var line = lines[_g];
			++_g;
			line = StringTools.trim(line);
			if(Main.rxURL.match(line)) {
				var url = line;
				if(header != null && header != "") {
					if(Config.markdown) {
						outLines.push("## [" + header + "](" + url + ")");
					} else {
						outLines.push(header);
						outLines.push(url);
					}
					header = null;
				} else if(markdown) {
					outLines.push("<!-- " + url + " -->");
				} else {
					outLines.push(url);
				}
				var ctx = Main.procURL(url);
				if(ctx.lines.length != 0) {
					var _g1 = 0;
					var _g2 = ctx.lines;
					while(_g1 < _g2.length) {
						var line1 = _g2[_g1];
						++_g1;
						outLines.push(line1);
					}
				} else {
					var text = ctx.getError();
					if(markdown) {
						outLines.push("<!-- " + text + " -->");
					} else {
						outLines.push(text);
					}
				}
			} else {
				if(header != null) {
					outLines.push(header);
				}
				header = line;
			}
		}
	}
	var _g = 0;
	while(_g < args.length) {
		var url = args[_g];
		++_g;
		var ctx = Main.procURL(url);
		if(ctx.lines.length != 0) {
			if(outLines.length > 0) {
				outLines.push("");
			}
			var _g1 = 0;
			var _g2 = ctx.lines;
			while(_g1 < _g2.length) {
				var line = _g2[_g1];
				++_g1;
				outLines.push(line);
			}
		} else {
			var text = ctx.getError();
			if(markdown) {
				outLines.push("<!-- " + text + " -->");
			} else {
				outLines.push(text);
			}
		}
	}
	var outText = outLines.join("\r\n");
	if(outPath != null) {
		js_node_Fs.writeFileSync(outPath,outText);
		process.stdout.write("OK!");
		process.stdout.write("\n");
	} else {
		process.stdout.write(Std.string(outText));
		process.stdout.write("\n");
	}
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.htmlUnescape = function(s) {
	return s.split("&gt;").join(">").split("&lt;").join("<").split("&quot;").join("\"").split("&#039;").join("'").split("&amp;").join("&");
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var Sys = function() { };
Sys.__name__ = true;
Sys.sleep = function(seconds) {
	var end = Date.now() + seconds * 1000;
	while(Date.now() <= end) {
	}
};
var haxe_io_Output = function() { };
haxe_io_Output.__name__ = true;
var _$Sys_FileOutput = function(fd) {
	this.fd = fd;
};
_$Sys_FileOutput.__name__ = true;
_$Sys_FileOutput.__super__ = haxe_io_Output;
_$Sys_FileOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(c) {
		js_node_Fs.writeSync(this.fd,String.fromCodePoint(c));
	}
	,writeBytes: function(s,pos,len) {
		var data = s.b;
		return js_node_Fs.writeSync(this.fd,js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length),pos,len);
	}
	,writeString: function(s,encoding) {
		js_node_Fs.writeSync(this.fd,s);
	}
	,flush: function() {
		js_node_Fs.fsyncSync(this.fd);
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
});
var haxe_io_Input = function() { };
haxe_io_Input.__name__ = true;
var _$Sys_FileInput = function(fd) {
	this.fd = fd;
};
_$Sys_FileInput.__name__ = true;
_$Sys_FileInput.__super__ = haxe_io_Input;
_$Sys_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	readByte: function() {
		var buf = js_node_buffer_Buffer.alloc(1);
		try {
			js_node_Fs.readSync(this.fd,buf,0,1,null);
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			if(e.code == "EOF") {
				throw haxe_Exception.thrown(new haxe_io_Eof());
			} else {
				throw haxe_Exception.thrown(haxe_io_Error.Custom(e));
			}
		}
		return buf[0];
	}
	,readBytes: function(s,pos,len) {
		var data = s.b;
		var buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		try {
			return js_node_Fs.readSync(this.fd,buf,pos,len,null);
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			if(e.code == "EOF") {
				throw haxe_Exception.thrown(new haxe_io_Eof());
			} else {
				throw haxe_Exception.thrown(haxe_io_Error.Custom(e));
			}
		}
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
});
var Test = function() { };
Test.__name__ = true;
Test.run = function() {
	Config.cache = true;
	Config.verbose = true;
	Config.prefix = "tmp/";
	Config.ready();
	var problems = [];
	var ctx = Main.procURL("https://mastodon.social/@yellowafterlife/115033558720661387");
	var have = ctx.imageLines.length;
	if(have != 2) {
		problems.push("Assertion failed for " + "Mastodon images" + ": have " + Std.string(have) + ", want: " + "2");
	}
	ctx = Main.procURL("https://mastodon.social/@yellowafterlife/114128808002109755");
	var have = ctx.imageLines.length;
	if(have != 1) {
		problems.push("Assertion failed for " + "Mastodon video" + ": have " + Std.string(have) + ", want: " + "1");
	}
	ctx = Main.procURL("https://bsky.app/profile/yellowafterlife.bsky.social/post/3lwh6s7axvc2o");
	var have = ctx.imageLines.length;
	if(have != 2) {
		problems.push("Assertion failed for " + "BSky images" + ": have " + Std.string(have) + ", want: " + "2");
	}
	ctx = Main.procURL("https://bsky.app/profile/yellowafterlife.bsky.social/post/3ljvf56g3rk2g");
	var have = ctx.videoLines.length;
	if(have != 1) {
		problems.push("Assertion failed for " + "BSky video" + ": have " + Std.string(have) + ", want: " + "1");
	}
	ctx = Main.procURL("https://bsky.app/profile/yellowafterlife.bsky.social/post/3lvtjudru2k2u");
	var have = ctx.imageLines.length;
	if(have != 1) {
		problems.push("Assertion failed for " + "BSky quote" + ": have " + Std.string(have) + ", want: " + "1");
	}
	ctx = Main.procURL("https://x.com/YellowAfterlife/status/1956382267808608509");
	var have = ctx.imageLines.length;
	if(have != 2) {
		problems.push("Assertion failed for " + "Twitter images" + ": have " + Std.string(have) + ", want: " + "2");
	}
	ctx = Main.procURL("https://x.com/YellowAfterlife/status/1967645815188729940");
	var have = ctx.videoLines.length;
	if(have != 1) {
		problems.push("Assertion failed for " + "Twitter GIF" + ": have " + Std.string(have) + ", want: " + "1");
	}
	ctx = Main.procURL("https://x.com/YellowAfterlife/status/1870232809631023361");
	var have = ctx.videoLines.length;
	if(have != 1) {
		problems.push("Assertion failed for " + "Twitter video" + ": have " + Std.string(have) + ", want: " + "1");
	}
	if(problems.length == 0) {
		process.stdout.write("All is well!");
		process.stdout.write("\n");
	} else {
		var _g = 0;
		while(_g < problems.length) {
			var line = problems[_g];
			++_g;
			process.stdout.write(Std.string(line));
			process.stdout.write("\n");
		}
	}
};
var Tools = function() { };
Tools.__name__ = true;
Tools.sanitizeName = function(url) {
	if(Tools.sanitizeName_rxProtocol.match(url)) {
		url = Tools.sanitizeName_rxProtocol.matched(1);
	}
	var qAt = url.indexOf("?");
	if(qAt >= 0) {
		url = url.substring(0,qAt);
	}
	var hAt = url.indexOf("#");
	if(hAt >= 0) {
		url = url.substring(0,hAt);
	}
	url = StringTools.replace(url,"/",Config.sep);
	var _this_r = new RegExp("[\\\\/:*?\"<>|]","g".split("u").join(""));
	url = url.replace(_this_r,"");
	return url;
};
Tools.each = function(r,s,f) {
	var i = 0;
	while(r.matchSub(s,i)) {
		var p = r.matchedPos();
		f(r);
		i = p.pos + p.len;
	}
};
Tools.removeFromStart = function(str,sub) {
	if(StringTools.startsWith(str,sub)) {
		return str.substring(sub.length);
	} else {
		return str;
	}
};
Tools.appendIndex = function(str,ind) {
	if(ind > 0) {
		return str + Config.sep + ind;
	} else {
		return str;
	}
};
Tools.appendExtensionOf = function(str,path,def) {
	var ext = Tools.urlExtension(path);
	if(ext != "") {
		return str + "." + ext;
	} else if(def != null) {
		return str + "." + def;
	} else {
		return str;
	}
};
Tools.urlExtension = function(url) {
	var qAt = url.indexOf("?");
	if(qAt >= 0) {
		url = url.substring(0,qAt);
	}
	return haxe_io_Path.extension(url).toLowerCase();
};
Tools.getMatches = function(rx,n) {
	var _g = [];
	var _g1 = 1;
	var _g2 = n + 1;
	while(_g1 < _g2) {
		var i = _g1++;
		_g.push(rx.matched(i));
	}
	return _g;
};
Tools.getMeta = function(html,property) {
	var result = [];
	Tools.each(Tools.getMeta_rxMeta,html,function(rx) {
		var inner = rx.matched(1);
		if(Tools.getMeta_rxProp.match(inner)) {
			if(Tools.getMeta_rxProp.matched(1) != property) {
				return;
			}
		} else if(Tools.getMeta_rxName.match(inner)) {
			if(Tools.getMeta_rxName.matched(1) != property) {
				return;
			}
		} else {
			return;
		}
		if(!Tools.getMeta_rxContent.match(inner)) {
			return;
		}
		var escText = Tools.getMeta_rxContent.matched(1);
		var text = StringTools.htmlUnescape(escText);
		result.push(text);
	});
	return result;
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = true;
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	unwrap: function() {
		return this.__nativeException;
	}
	,get_native: function() {
		return this.__nativeException;
	}
});
var haxe_Log = function() { };
haxe_Log.__name__ = true;
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	unwrap: function() {
		return this.value;
	}
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:true,__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_io_Eof = function() {
};
haxe_io_Eof.__name__ = true;
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:true,__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
haxe_io_Path.__name__ = true;
haxe_io_Path.withoutExtension = function(path) {
	var s = new haxe_io_Path(path);
	s.ext = null;
	return s.toString();
};
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
haxe_io_Path.extension = function(path) {
	var s = new haxe_io_Path(path);
	if(s.ext == null) {
		return "";
	}
	return s.ext;
};
haxe_io_Path.withExtension = function(path,ext) {
	var s = new haxe_io_Path(path);
	s.ext = ext;
	return s.toString();
};
haxe_io_Path.join = function(paths) {
	var _g = [];
	var _g1 = 0;
	var _g2 = paths;
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		if(v != null && v != "") {
			_g.push(v);
		}
	}
	var paths = _g;
	if(paths.length == 0) {
		return "";
	}
	var path = paths[0];
	var _g = 1;
	var _g1 = paths.length;
	while(_g < _g1) {
		var i = _g++;
		path = haxe_io_Path.addTrailingSlash(path);
		path += paths[i];
	}
	return haxe_io_Path.normalize(path);
};
haxe_io_Path.normalize = function(path) {
	var slash = "/";
	path = path.split("\\").join(slash);
	if(path == slash) {
		return slash;
	}
	var target = [];
	var _g = 0;
	var _g1 = path.split(slash);
	while(_g < _g1.length) {
		var token = _g1[_g];
		++_g;
		if(token == ".." && target.length > 0 && target[target.length - 1] != "..") {
			target.pop();
		} else if(token == "") {
			if(target.length > 0 || HxOverrides.cca(path,0) == 47) {
				target.push(token);
			}
		} else if(token != ".") {
			target.push(token);
		}
	}
	var tmp = target.join(slash);
	var acc_b = "";
	var colon = false;
	var slashes = false;
	var _g_offset = 0;
	var _g_s = tmp;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var c2 = c1;
		switch(c2) {
		case 47:
			if(!colon) {
				slashes = true;
			} else {
				var i = c2;
				colon = false;
				if(slashes) {
					acc_b += "/";
					slashes = false;
				}
				acc_b += String.fromCodePoint(i);
			}
			break;
		case 58:
			acc_b += ":";
			colon = true;
			break;
		default:
			var i1 = c2;
			colon = false;
			if(slashes) {
				acc_b += "/";
				slashes = false;
			}
			acc_b += String.fromCodePoint(i1);
		}
	}
	return acc_b;
};
haxe_io_Path.addTrailingSlash = function(path) {
	if(path.length == 0) {
		return "/";
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		if(c2 != path.length - 1) {
			return path + "\\";
		} else {
			return path;
		}
	} else if(c1 != path.length - 1) {
		return path + "/";
	} else {
		return path;
	}
};
haxe_io_Path.prototype = {
	toString: function() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_node_ChildProcess = require("child_process");
var js_node_Fs = require("fs");
var js_node_KeyValue = {};
js_node_KeyValue.get_key = function(this1) {
	return this1[0];
};
js_node_KeyValue.get_value = function(this1) {
	return this1[1];
};
var js_node_Path = require("path");
var js_node_buffer_Buffer = require("buffer").Buffer;
var js_node_stream_WritableNewOptionsAdapter = {};
js_node_stream_WritableNewOptionsAdapter.from = function(options) {
	if(!Object.prototype.hasOwnProperty.call(options,"final")) {
		Object.defineProperty(options,"final",{ get : function() {
			return options.final_;
		}});
	}
	return options;
};
var js_node_url_URLSearchParamsEntry = {};
js_node_url_URLSearchParamsEntry._new = function(name,value) {
	return [name,value];
};
js_node_url_URLSearchParamsEntry.get_name = function(this1) {
	return this1[0];
};
js_node_url_URLSearchParamsEntry.get_value = function(this1) {
	return this1[1];
};
var places_BSky = function() { };
places_BSky.__name__ = true;
places_BSky.get = function(ctx,prev) {
	var html = CURL.getText(ctx.url,"html");
	if(html == null) {
		ctx.noPage = true;
		return;
	}
	var backupHost = "bskx.app";
	if(Tools.getMeta(html,"twitter:card")[0] == "summary" && ctx.hostname != backupHost) {
		if(Config.verbose) {
			console.info("twitter:card is \"summary\", trying " + backupHost + " instead...");
		}
		ctx.hostname = backupHost;
		ctx.url = "https://" + backupHost + ctx.pathname;
		places_BSky.get(ctx,html);
		return;
	}
	var name = ctx.pathname;
	if(places_BSky.get_rxPath.match(name)) {
		var userID = Tools.sanitizeName(places_BSky.get_rxPath.matched(1));
		var postID = Tools.sanitizeName(places_BSky.get_rxPath.matched(2));
		name = ["bsky",userID,postID].join(Config.sep);
	} else {
		name = "bsky" + Tools.sanitizeName(ctx.pathname);
	}
	var images = [];
	var imageURLs = Tools.getMeta(html,"og:image");
	var _g = 0;
	while(_g < imageURLs.length) {
		var imageURL = imageURLs[_g];
		++_g;
		var _this_r = new RegExp("/img/feed_thumbnail/","".split("u").join(""));
		imageURL = imageURL.replace(_this_r,"/img/feed_fullsize/");
		var imageExt;
		if(Config.lossless) {
			var _this_r1 = new RegExp("@jpeg$","".split("u").join(""));
			imageURL = imageURL.replace(_this_r1,"@png");
			imageExt = "png";
		} else if(Config.useWEBP) {
			var _this_r2 = new RegExp("@jpeg$","".split("u").join(""));
			imageURL = imageURL.replace(_this_r2,"@webp");
			imageExt = "webp";
		} else {
			imageExt = "jpg";
		}
		var imageRel = Config.prefix + Tools.appendIndex(name,images.length) + "." + imageExt;
		var imageFull = Config.outDir + "/" + imageRel;
		if(!CURL.download(imageURL,imageFull)) {
			continue;
		}
		images.push({ rel : imageRel, full : imageFull, url : imageURL});
	}
	var videoCount = 0;
	var videoURLs = Tools.getMeta(html,"og:video");
	var _g = 0;
	while(_g < videoURLs.length) {
		var videoURL = videoURLs[_g];
		++_g;
		var videoRel = Config.prefix + Tools.appendIndex(name,videoCount) + ".mp4";
		var videoFull = Config.outDir + "/" + videoRel;
		if(!CURL.download(videoURL,videoFull)) {
			continue;
		}
		++videoCount;
		var thumbRel = null;
		if(places_BSky.get_rxVideoID.match(videoURL)) {
			var videoID = places_BSky.get_rxVideoID.matched(1);
			var _g1 = [];
			var _g2 = 0;
			var _g3 = images;
			while(_g2 < _g3.length) {
				var v = _g3[_g2];
				++_g2;
				if(v.url.indexOf("/" + videoID + "/thumbnail") != -1) {
					_g1.push(v);
				}
			}
			var thumb = _g1[0];
			if(thumb != null) {
				HxOverrides.remove(images,thumb);
				thumbRel = thumb.rel;
			}
		}
		ctx.addVideo(videoRel,thumbRel,"");
	}
	var _g = 0;
	while(_g < images.length) {
		var image = images[_g];
		++_g;
		var thumbRel = Magick.createThumb(image.rel,image.full);
		ctx.addImage(image.rel,image.full,thumbRel,"");
	}
};
var places_Generic = function() { };
places_Generic.__name__ = true;
places_Generic.get = function(ctx) {
	var html = CURL.getText(ctx.url,"html");
	if(html == null) {
		ctx.noPage = true;
		return;
	}
	var name;
	switch(ctx.hostname) {
	case "www.youtube.com":case "youtube.com":
		var rxYT = new EReg("\\bv=([\\w-]+)","");
		if(rxYT.match(ctx.pathname)) {
			name = "youtube-" + rxYT.matched(1);
		} else {
			name = "youtube-" + Tools.sanitizeName(ctx.pathname);
		}
		break;
	default:
		name = Tools.sanitizeName(ctx.url);
	}
	var imageAltTexts = Tools.getMeta(html,"og:image:alt");
	var imageCount = 0;
	var _g_current = 0;
	var _g_array = Tools.getMeta(html,"og:image");
	while(_g_current < _g_array.length) {
		var _g_value = _g_array[_g_current];
		var _g_key = _g_current++;
		var i = _g_key;
		var imageURL = _g_value;
		var imageRel = Config.prefix + Tools.appendExtensionOf(Tools.appendIndex(name,imageCount),imageURL,"jpg");
		var imageFull = Config.outDir + "/" + imageRel;
		if(CURL.download(imageURL,imageFull)) {
			var thumbRel = Magick.createThumb(imageRel,imageFull);
			ctx.addImage(imageRel,imageFull,thumbRel,imageAltTexts[i]);
			++imageCount;
		}
	}
	var videoCount = 0;
	var _g = 0;
	var _g1 = Tools.getMeta(html,"og:video");
	while(_g < _g1.length) {
		var videoURL = _g1[_g];
		++_g;
		var videoRel = Config.prefix + Tools.appendExtensionOf(Tools.appendIndex(name,videoCount),videoURL,"mp4");
		var videoFull = Config.outDir + "/" + videoRel;
		if(CURL.download(videoURL,videoFull)) {
			ctx.addVideo(videoURL,null,"");
			++videoCount;
		}
	}
};
var places_Twitter = function() { };
places_Twitter.__name__ = true;
places_Twitter.get = function(ctx) {
	var vxURL = "https://api.vxtwitter.com" + ctx.pathname;
	var text = CURL.getText(vxURL,"json");
	if(text == null) {
		process.stdout.write("No response!");
		process.stdout.write("\n");
		return;
	}
	var tweet;
	try {
		tweet = JSON.parse(text);
	} catch( _g ) {
		var x = haxe_Exception.caught(_g).unwrap();
		var v = "JSON parse error! " + Std.string(x);
		process.stdout.write(Std.string(v));
		process.stdout.write("\n");
		return;
	}
	var name = ["twitter",tweet.user_screen_name,tweet.tweetID].join(Config.sep);
	var media = tweet.media_extended;
	if(places_Twitter.get_rxMediaID.match(ctx.pathname)) {
		var ind = Std.parseInt(places_Twitter.get_rxMediaID.matched(1));
		if(ind < 1 || ind > media.length) {
			var v = "Specified /photo/ is " + ind + " but tweet only has " + media.length + " attachments.";
			process.stdout.write(Std.string(v));
			process.stdout.write("\n");
			return;
		}
		media = [media[ind - 1]];
	}
	var _g_current = 0;
	var _g_array = media;
	while(_g_current < _g_array.length) {
		var _g_value = _g_array[_g_current];
		var _g_key = _g_current++;
		var itemInd = _g_key;
		var item = _g_value;
		var url = item.url;
		var qAt = url.indexOf("?");
		if(qAt >= 0) {
			url = url.substring(0,qAt);
		}
		var itemExt = haxe_io_Path.extension(url).toLowerCase();
		if(itemExt == "") {
			switch(item.type) {
			case "gif":case "video":
				itemExt = "mp4";
				break;
			default:
				itemExt = "jpg";
			}
		}
		var itemName = Tools.appendIndex(name,itemInd);
		var itemRel = Config.prefix + itemName + ("." + itemExt);
		var itemFull = Config.outDir + "/" + itemRel;
		var isVideo = item.type == "gif" || item.type == "video";
		if(isVideo) {
			if(!CURL.download(url,itemFull)) {
				continue;
			}
		} else if(!CURL.download(url,itemFull)) {
			continue;
		}
		if(isVideo) {
			var thumbURL = item.thumbnail_url;
			var thumbExt = haxe_io_Path.extension(thumbURL);
			if(thumbExt == "") {
				thumbExt = "jpg";
			}
			var thumbRel = Config.prefix + itemName + Config.sep + ("th." + thumbExt);
			var thumbFull = Config.outDir + "/" + thumbRel;
			if(!CURL.download(thumbURL,thumbFull)) {
				thumbRel = null;
			}
			var tmp = item.altText;
			ctx.addVideo(itemRel,tmp != null ? tmp : "",thumbRel);
		} else {
			var thumbRel1 = Magick.createThumb(itemRel,itemFull);
			var tmp1 = item.altText;
			ctx.addImage(itemRel,itemFull,thumbRel1,tmp1 != null ? tmp1 : "");
		}
	}
};
var sys_FileSystem = function() { };
sys_FileSystem.__name__ = true;
sys_FileSystem.exists = function(path) {
	try {
		js_node_Fs.accessSync(path);
		return true;
	} catch( _g ) {
		return false;
	}
};
sys_FileSystem.createDirectory = function(path) {
	try {
		js_node_Fs.mkdirSync(path);
	} catch( _g ) {
		var e = haxe_Exception.caught(_g).unwrap();
		if(e.code == "ENOENT") {
			sys_FileSystem.createDirectory(js_node_Path.dirname(path));
			js_node_Fs.mkdirSync(path);
		} else {
			var stat;
			try {
				stat = js_node_Fs.statSync(path);
			} catch( _g1 ) {
				throw e;
			}
			if(!stat.isDirectory()) {
				throw e;
			}
		}
	}
};
var sys_io_File = function() { };
sys_io_File.__name__ = true;
sys_io_File.copy = function(srcPath,dstPath) {
	var src = js_node_Fs.openSync(srcPath,"r");
	var stat = js_node_Fs.fstatSync(src);
	var dst = js_node_Fs.openSync(dstPath,"w",stat.mode);
	var bytesRead;
	var pos = 0;
	while(true) {
		bytesRead = js_node_Fs.readSync(src,sys_io_File.copyBuf,0,65536,pos);
		if(!(bytesRead > 0)) {
			break;
		}
		js_node_Fs.writeSync(dst,sys_io_File.copyBuf,0,bytesRead);
		pos += bytesRead;
	}
	js_node_Fs.closeSync(src);
	js_node_Fs.closeSync(dst);
};
var sys_io_FileInput = function(fd) {
	this.hasReachedEof = false;
	this.fd = fd;
	this.pos = 0;
};
sys_io_FileInput.__name__ = true;
sys_io_FileInput.__super__ = haxe_io_Input;
sys_io_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	throwEof: function() {
		this.hasReachedEof = true;
		throw haxe_Exception.thrown(new haxe_io_Eof());
	}
	,readByte: function() {
		var buf = js_node_buffer_Buffer.alloc(1);
		var bytesRead;
		try {
			bytesRead = js_node_Fs.readSync(this.fd,buf,0,1,this.pos);
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			if(e.code == "EOF") {
				this.hasReachedEof = true;
				throw haxe_Exception.thrown(new haxe_io_Eof());
			}
			throw haxe_Exception.thrown(haxe_io_Error.Custom(e));
		}
		if(bytesRead == 0) {
			this.hasReachedEof = true;
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.pos++;
		return buf[0];
	}
	,readBytes: function(s,pos,len) {
		var data = s.b;
		var buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		var bytesRead;
		try {
			bytesRead = js_node_Fs.readSync(this.fd,buf,pos,len,this.pos);
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			if(e.code == "EOF") {
				this.hasReachedEof = true;
				throw haxe_Exception.thrown(new haxe_io_Eof());
			}
			throw haxe_Exception.thrown(haxe_io_Error.Custom(e));
		}
		if(bytesRead == 0) {
			this.hasReachedEof = true;
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.pos += bytesRead;
		return bytesRead;
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,seek: function(p,pos) {
		this.hasReachedEof = false;
		switch(pos._hx_index) {
		case 0:
			this.pos = p;
			break;
		case 1:
			this.pos += p;
			break;
		case 2:
			this.pos = js_node_Fs.fstatSync(this.fd).size + p;
			break;
		}
	}
	,tell: function() {
		return this.pos;
	}
	,eof: function() {
		return this.hasReachedEof;
	}
});
var sys_io_FileOutput = function(fd) {
	this.fd = fd;
	this.pos = 0;
};
sys_io_FileOutput.__name__ = true;
sys_io_FileOutput.__super__ = haxe_io_Output;
sys_io_FileOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(b) {
		var buf = js_node_buffer_Buffer.alloc(1);
		buf[0] = b;
		js_node_Fs.writeSync(this.fd,buf,0,1,this.pos);
		this.pos++;
	}
	,writeBytes: function(s,pos,len) {
		var data = s.b;
		var buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		var wrote = js_node_Fs.writeSync(this.fd,buf,pos,len,this.pos);
		this.pos += wrote;
		return wrote;
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,seek: function(p,pos) {
		switch(pos._hx_index) {
		case 0:
			this.pos = p;
			break;
		case 1:
			this.pos += p;
			break;
		case 2:
			this.pos = js_node_Fs.fstatSync(this.fd).size + p;
			break;
		}
	}
	,tell: function() {
		return this.pos;
	}
});
var sys_io_FileSeek = $hxEnums["sys.io.FileSeek"] = { __ename__:true,__constructs__:null
	,SeekBegin: {_hx_name:"SeekBegin",_hx_index:0,__enum__:"sys.io.FileSeek",toString:$estr}
	,SeekCur: {_hx_name:"SeekCur",_hx_index:1,__enum__:"sys.io.FileSeek",toString:$estr}
	,SeekEnd: {_hx_name:"SeekEnd",_hx_index:2,__enum__:"sys.io.FileSeek",toString:$estr}
};
sys_io_FileSeek.__constructs__ = [sys_io_FileSeek.SeekBegin,sys_io_FileSeek.SeekCur,sys_io_FileSeek.SeekEnd];
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.__name__ = true;
Array.__name__ = true;
Date.__name__ = "Date";
js_Boot.__toStr = ({ }).toString;
CURL.spawnCURL_first = true;
Config.verbose = false;
Config.cache = false;
Config.outDir = ".";
Config.prefix = "";
Config.markdown = false;
Config.magick = false;
Config.lossless = false;
Config.useWEBP = false;
Config.quality = 80;
Config.maxWidth = 0;
Config.maxHeight = 0;
Config.maxSize = 0;
Config.delay = 0;
Config.sep = "=";
Magick.getDims_rxDims = new EReg("\\bdims:(\\d+):(\\d+)","");
Main.rxURL = new EReg("http[s]?://(.+?)($|(?:/.*))","");
Tools.getMeta_rxContent = new EReg("\\bcontent\\s*=\\s*\"([\\s\\S]+?)\"","");
Tools.getMeta_rxName = new EReg("\\bname\\s*=\\s*\"(.+?)\"","");
Tools.getMeta_rxProp = new EReg("\\bproperty\\s*=\\s*\"(.+?)\"","");
Tools.getMeta_rxMeta = new EReg("<meta([\\s\\S]+?)/?>","g");
Tools.sanitizeName_rxProtocol = new EReg("http[s]?://(.+)","");
places_BSky.get_rxVideoID = new EReg(".+/(.+)/?$","");
places_BSky.get_rxPath = new EReg("^/profile/(.+?)/post/(.+?)(/|$)","");
places_Twitter.get_rxMediaID = new EReg("/status/\\d+/photo/(\\d+)","");
sys_io_File.copyBuf = js_node_buffer_Buffer.alloc(65536);
Main.main();
})({});
